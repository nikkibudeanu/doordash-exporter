@file:Suppress("MaxLineLength", "LongMethod", "ComplexMethod")

package com.doordash.android.prism.compose.foundation.dimens

/* GENERATED FILE, PLEASE DO NOT EDIT */

import androidx.compose.runtime.Stable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.runtime.structuralEqualityPolicy

/**
 * The Prism color system holding the color value that is currently assigned to the color semantic.
 *
 * Since the PrismDimens's dimens are internally backed by [mutableStateOf], this means that any changes
 * to the color members will mutate the internal state of [this], and only cause composables that
 * are reading the specific changed value to recompose.
 *
 * @param palette The color palette to initialize the Dimens from.
 *
 */
@Stable
class PrismDimens(dimensInterface: PrismDimensInterface) {
{[ const brand = ds.currentBrand() /]}
{[ const sizingTokensTree = ds.tokenGroupTreeByType("Measure", brand.id) /]}
{[ traverse sizingTokensTree property subgroups into sizingTokenGroup ]}
  {[ let validTokenGroupPath = createFullTokenGroupPath(sizingTokenGroup) /]}
    {[ const sizingTokensInGroups = ds.tokensByGroupId(sizingTokenGroup.id) /]}
    {[ for sizingToken in sizingTokensInGroups ]}
      {[ const camelcaseName = kebabToCamelCase(sizingToken.name) /]}
      {[ const validTokenPath = arrayConcat(validTokenGroupPath, camelcaseName) /]}
      {[ const validTokenPathClipped = arraySplice(validTokenPath, 0, 1) /]}
      {[ const validTokenPathClippedFinal = arraySplice(validTokenPathClipped, 0, 1) /]}
      {[ const validTokenName = arrayJoin(validTokenPathClippedFinal, " ") /]}
      {[ const internal = internalMeasureOrBlank(sizingTokenGroup) /]}
      {[ const internalSetOrBlank = internalSetMeasureOrBlank(sizingTokenGroup) /]}
    {{ internal }} {{ camelcaseWithZeros(validTokenName) }} by mutableStateOf(dimensInterface.{{ camelcaseWithZeros(validTokenName) }}, structuralEqualityPolicy())
    {{ internalSetOrBlank }}
  {[/]}
{[/]}

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is PrismDimens) return false

{[ traverse sizingTokensTree property subgroups into typographyTokenGroup ]}
  {[ let validTokenGroupPath = createFullTokenGroupPath(typographyTokenGroup) /]}
    {[ const sizingTokensInGroups = ds.tokensByGroupId(typographyTokenGroup.id) /]}
    {[ for sizingToken in sizingTokensInGroups ]}
      {[ const camelcaseName = kebabToCamelCase(sizingToken.name) /]}
      {[ const validTokenPath = arrayConcat(validTokenGroupPath, camelcaseName) /]}
      {[ const validTokenPathClipped = arraySplice(validTokenPath, 0, 1) /]}
      {[ const validTokenPathClippedFinal = arraySplice(validTokenPathClipped, 0, 1) /]}
      {[ const validTokenName = arrayJoin(validTokenPathClippedFinal, " ") /]}
        if ({{ camelcaseWithZeros(validTokenName) }} != other.{{ camelcaseWithZeros(validTokenName) }}) return false
  {[/]}
{[/]}
        return true
    }

    override fun hashCode(): Int {
        var result = 0

{[ traverse sizingTokensTree property subgroups into typographyTokenGroup ]}
  {[ let validTokenGroupPath = createFullTokenGroupPath(typographyTokenGroup) /]}
    {[ const sizingTokensInGroups = ds.tokensByGroupId(typographyTokenGroup.id) /]}
    {[ for sizingToken in sizingTokensInGroups ]}
      {[ const camelcaseName = kebabToCamelCase(sizingToken.name) /]}
      {[ const validTokenPath = arrayConcat(validTokenGroupPath, camelcaseName) /]}
      {[ const validTokenPathClipped = arraySplice(validTokenPath, 0, 1) /]}
      {[ const validTokenPathClippedFinal = arraySplice(validTokenPathClipped, 0, 1) /]}
      {[ const validTokenName = arrayJoin(validTokenPathClippedFinal, " ") /]}
        result = 31 * result + {{ camelcaseWithZeros(validTokenName) }}.hashCode()
  {[/]}
{[/]}
        return result
    }
}

/**
 * Creates a copy of [this] PrismDimens.
 */
fun PrismDimens.copy(): PrismDimens {
    val result = PrismDimens(DefaultDimens)
{[ traverse sizingTokensTree property subgroups into typographyTokenGroup ]}
  {[ let validTokenGroupPath = createFullTokenGroupPath(typographyTokenGroup) /]}
    {[ const sizingTokensInGroups = ds.tokensByGroupId(typographyTokenGroup.id) /]}
    {[ for sizingToken in sizingTokensInGroups ]}
      {[ const camelcaseName = kebabToCamelCase(sizingToken.name) /]}
      {[ const validTokenPath = arrayConcat(validTokenGroupPath, camelcaseName) /]}
      {[ const validTokenPathClipped = arraySplice(validTokenPath, 0, 1) /]}
      {[ const validTokenPathClippedFinal = arraySplice(validTokenPathClipped, 0, 1) /]}
      {[ const validTokenName = arrayJoin(validTokenPathClippedFinal, " ") /]}
    result.{{ camelcaseWithZeros(validTokenName) }} = this.{{ camelcaseWithZeros(validTokenName) }}
  {[/]}
{[/]}
    return result
}

/**
 * Updates the internal values of the given [PrismDimens] with values from the [other] [PrismDimens].
 *
 * Since PrismTheme's Dimens is internally backed by [mutableStateOf], calling this function
 * will mutate the internal state of [this] to match values in [other].
 *
 * @see copy
 */
internal fun PrismDimens.updateDimensFrom(other: PrismDimens) {
{[ traverse sizingTokensTree property subgroups into typographyTokenGroup ]}
  {[ let validTokenGroupPath = createFullTokenGroupPath(typographyTokenGroup) /]}
    {[ const sizingTokensInGroups = ds.tokensByGroupId(typographyTokenGroup.id) /]}
    {[ for sizingToken in sizingTokensInGroups ]}
      {[ const camelcaseName = kebabToCamelCase(sizingToken.name) /]}
      {[ const validTokenPath = arrayConcat(validTokenGroupPath, camelcaseName) /]}
      {[ const validTokenPathClipped = arraySplice(validTokenPath, 0, 1) /]}
      {[ const validTokenPathClippedFinal = arraySplice(validTokenPathClipped, 0, 1) /]}
      {[ const validTokenName = arrayJoin(validTokenPathClippedFinal, " ") /]}
    {{ camelcaseWithZeros(validTokenName) }} = other.{{ camelcaseWithZeros(validTokenName) }}
  {[/]}
{[/]}
}